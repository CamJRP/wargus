;;       _________ __                 __                               
;;      /   _____//  |_____________ _/  |______     ____  __ __  ______
;;      \_____  \\   __\_  __ \__  \\   __\__  \   / ___\|  |  \/  ___/
;;      /        \|  |  |  | \// __ \|  |  / __ \_/ /_/  >  |  /\___ \ 
;;     /_______  /|__|  |__|  (____  /__| (____  /\___  /|____//____  >
;;             \/                  \/          \//_____/            \/ 
;;  ______________________                           ______________________
;;			  T H E   W A R   B E G I N S
;;	   Stratagus - A free fantasy real time strategy game engine
;;
;;	ai.ccl		-	Define the AI.
;;
;;	(c) Copyright 2000-2002 by Lutz Sammer
;;
;;      This program is free software; you can redistribute it and/or modify
;;      it under the terms of the GNU General Public License as published by
;;      the Free Software Foundation; either version 2 of the License, or
;;      (at your option) any later version.
;;  
;;      This program is distributed in the hope that it will be useful,
;;      but WITHOUT ANY WARRANTY; without even the implied warranty of
;;      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;      GNU General Public License for more details.
;;  
;;      You should have received a copy of the GNU General Public License
;;      along with this program; if not, write to the Free Software
;;      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;;
;;	$Id$

;(define (ai:sleep) () #t)

(define race1 'human)
(define race2 'orc)

;;=============================================================================
;;
;;	AI helper table, the AI must know where to build units,
;;	where to research spells, where to upgrade units.
;;	If this is allowed and which dependencies exists, isn't
;;	handled	here. (see upgrade.ccl)
;;
;;	NOTE: perhaps this could later be used to build the buttons?
;;
;;	(define-ai-helper (list))
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	* Race human.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-ai-helper
    ;;
    ;;	Unit can build which buildings.
    ;;
    (list 'build 'unit-peasant
	'unit-farm 'unit-alliance-barracks 'unit-town-hall 'unit-elven-lumber-mill
	'unit-alliance-blacksmith 'unit-alliance-watch-tower 'unit-human-wall
	'unit-alliance-shipyard 'unit-alliance-foundry 'unit-human-refinery
	'unit-inventor 'unit-stables 'unit-mage-tower 'unit-church
	'unit-gryphon-aviary 'unit-dark-portal 'unit-runestone)
    (list 'build 'unit-human-oil-tanker 'unit-alliance-oil-platform)
    ;;
    ;;	Building can train which units.
    ;;
    (list 'train 'unit-farm 'unit-critter)
    (list 'train 'unit-town-hall 'unit-peasant)
    (list 'train 'unit-keep 'unit-peasant)
    (list 'train 'unit-castle 'unit-peasant)
    (list 'train 'unit-alliance-barracks
	'unit-footman 'unit-archer 'unit-ranger 'unit-ballista 'unit-knight
	'unit-paladin)
    (list 'train 'unit-inventor
	'unit-balloon 'unit-dwarves)
    (list 'train 'unit-mage-tower 'unit-mage)
    (list 'train 'unit-gryphon-aviary 'unit-gryphon-rider)
    (list 'train 'unit-alliance-shipyard
	'unit-human-oil-tanker 'unit-alliance-destroyer 'unit-alliance-transport
	'unit-alliance-submarine 'unit-battleship)
    ;;
    ;;	Building can upgrade which upgrades.
    ;;
    (list 'upgrade 'unit-town-hall 'unit-keep)
    (list 'upgrade 'unit-keep 'unit-castle)
    (list 'upgrade 'unit-alliance-watch-tower
	'unit-alliance-guard-tower 'unit-alliance-cannon-tower)
    ;;
    ;;	Building can research which spells or upgrades.
    ;;
    (list 'research 'unit-alliance-blacksmith
	'upgrade-sword1 'upgrade-sword2
	'upgrade-human-shield1 'upgrade-human-shield2
	'upgrade-ballista1 'upgrade-ballista2)
    (list 'research 'unit-elven-lumber-mill
	'upgrade-arrow1 'upgrade-arrow2 'upgrade-ranger
	'upgrade-ranger-scouting 'upgrade-longbow 'upgrade-ranger-marksmanship)
    (list 'research 'unit-church
	'upgrade-paladin 'upgrade-healing 'upgrade-exorcism)
    (list 'research 'unit-mage-tower
	'upgrade-slow 'upgrade-flame-shield 'upgrade-invisibility
	'upgrade-polymorph 'upgrade-blizzard)
    (list 'research 'unit-alliance-foundry
	'upgrade-human-ship-cannon1 'upgrade-human-ship-cannon2
	'upgrade-human-ship-armor1 'upgrade-human-ship-armor2)
    ;;
    ;;	Unit can repair which units.
    ;;
    (list 'repair 'unit-peasant
	'unit-farm 'unit-alliance-barracks 'unit-town-hall 'unit-keep 'unit-castle
	'unit-elven-lumber-mill 'unit-alliance-blacksmith 'unit-alliance-watch-tower
	'unit-alliance-guard-tower 'unit-alliance-cannon-tower 'unit-human-wall
	'unit-alliance-shipyard 'unit-alliance-foundry 'unit-human-refinery
	'unit-inventor 'unit-stables 'unit-mage-tower 'unit-church
	'unit-gryphon-aviary 'unit-dark-portal 'unit-runestone
	'unit-alliance-transport)
    ;;
    ;;	Reduce unit limits.
    ;;
    (list 'unit-limit 'unit-farm 'food)
    ;;
    ;;	Equivalence of units for the resource manager.
    ;;
    (list 'unit-equiv 'unit-town-hall
	'unit-keep 'unit-castle)
    (list 'unit-equiv 'unit-keep
	'unit-castle)
    (list 'unit-equiv 'unit-archer
	'unit-ranger)
    (list 'unit-equiv 'unit-knight
	'unit-paladin)
    (list 'unit-equiv 'unit-peasant)
    (list 'unit-equiv 'unit-human-oil-tanker) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	* Race orc.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-ai-helper
    ;;
    ;;	Unit can build which buildings.
    ;;
    (list 'build 'unit-peon
	'unit-pig-farm 'unit-mythical-barracks 'unit-great-hall
	'unit-troll-lumber-mill 'unit-mythical-blacksmith 'unit-mythical-watch-tower
	'unit-orc-wall 'unit-mythical-shipyard 'unit-mythical-foundry 'unit-orc-refinery
	'unit-alchemist 'unit-ogre-mound 'unit-temple-of-the-damned
	'unit-altar-of-storms
	'unit-dragon-roost 'unit-dark-portal 'unit-runestone)
    (list 'build 'unit-orc-oil-tanker 'unit-mythical-oil-platform)
    ;;
    ;;	Building can train which units.
    ;;
    (list 'train 'unit-pig-farm 'unit-critter)
    (list 'train 'unit-great-hall 'unit-peon)
    (list 'train 'unit-stronghold 'unit-peon)
    (list 'train 'unit-fortress 'unit-peon)
    (list 'train 'unit-mythical-barracks
	'unit-grunt 'unit-axethrower 'unit-berserker 'unit-catapult 'unit-ogre
	'unit-ogre-mage)
    (list 'train 'unit-alchemist
	'unit-zeppelin 'unit-goblin-sappers)
    (list 'train 'unit-temple-of-the-damned 'unit-death-knight)
    (list 'train 'unit-dragon-roost 'unit-dragon)
    (list 'train 'unit-mythical-shipyard
	'unit-orc-oil-tanker 'unit-mythical-destroyer 'unit-mythical-transport
	'unit-mythical-submarine 'unit-ogre-juggernaught)
    ;;
    ;;	Building can upgrade which upgrades.
    ;;
    (list 'upgrade 'unit-great-hall 'unit-stronghold)
    (list 'upgrade 'unit-stronghold 'unit-fortress)
    (list 'upgrade 'unit-mythical-watch-tower
	'unit-mythical-guard-tower 'unit-mythical-cannon-tower)
    ;;
    ;;	Building can research which spells or upgrades.
    ;;
    (list 'research 'unit-mythical-blacksmith
	'upgrade-battle-axe1 'upgrade-battle-axe2
	'upgrade-orc-shield1 'upgrade-orc-shield2
	'upgrade-catapult1 'upgrade-catapult2)
    (list 'research 'unit-troll-lumber-mill
	'upgrade-throwing-axe1 'upgrade-throwing-axe2 'upgrade-berserker
	'upgrade-berserker-scouting 'upgrade-light-axes
	'upgrade-berserker-regeneration)
    (list 'research 'unit-altar-of-storms
	'upgrade-ogre-mage 'upgrade-bloodlust 'upgrade-runes)
    (list 'research 'unit-temple-of-the-damned
	'upgrade-haste 'upgrade-raise-dead 'upgrade-whirlwind
	'upgrade-unholy-armor 'upgrade-death-and-decay)
    (list 'research 'unit-mythical-foundry
	'upgrade-orc-ship-cannon1 'upgrade-orc-ship-cannon2
	'upgrade-orc-ship-armor1 'upgrade-orc-ship-armor2)
    ;;
    ;;	Unit can build which units.
    ;;
    (list 'repair 'unit-peon
	'unit-pig-farm 'unit-mythical-barracks 'unit-great-hall 'unit-stronghold
	'unit-fortress 'unit-troll-lumber-mill 'unit-mythical-blacksmith
	'unit-mythical-watch-tower 'unit-mythical-guard-tower 'unit-mythical-cannon-tower
	'unit-orc-wall 'unit-mythical-shipyard 'unit-mythical-foundry 'unit-orc-refinery
	'unit-alchemist 'unit-ogre-mound 'unit-temple-of-the-damned
	'unit-altar-of-storms 'unit-dragon-roost 'unit-dark-portal
	'unit-runestone 'unit-mythical-transport)
    ;;
    ;;	Reduce unit limits.
    ;;
    (list 'unit-limit 'unit-pig-farm 'food)
    ;;
    ;;	Equivalence of units for the resource manager.
    ;;
    (list 'unit-equiv 'unit-great-hall
	'unit-stronghold 'unit-fortress)
    (list 'unit-equiv 'unit-stronghold
	'unit-fortress)
    (list 'unit-equiv 'unit-axethrower
	'unit-berserker)
    (list 'unit-equiv 'unit-ogre
	'unit-ogre-mage)
    (list 'unit-equiv 'unit-peon)
    (list 'unit-equiv 'unit-orc-oil-tanker) )

;;=============================================================================
;;
;;	AI Script commands
;;
;;	(ai:debug flag) (ai:debug #f)
;;
;;		Enables printing of the AI commands.
;;
;;	(ai:need unit-type) (ai:need 'unit-farm)
;;
;;		Tells the ai that it should have this type of unit.
;;		They are build in the ordered of the commands.
;;		If lost automatic rebuild.
;;
;;	(ai:set unit-type count) (ai:set 'unit-farm 4)
;;
;;		Tells the ai that it should have count units of this type.
;;		If there is already a request of this unit-type it number is
;;		changed. They are build in the ordered of the commands.
;;		If lost automatic rebuild.
;;
;;	(ai:wait unit-type) (ai:wait 'unit-peasant)
;;
;;		Waits until the *first* request of this unit-type is completed.
;;
;;	(ai:force force unit-type1 count1 ... unit-typeN countN)
;;	(ai:force 0 'unit-footman 4 'unit-archer 4)
;;
;;		Defines a force for the AI. Ten forces are supported.
;;		Force 0 defaults currently to the home defence and send
;;		if a building is attacked.
;;
;;	(ai:wait-force force) (ai:wait-force 1)
;;
;;		Wait until a force is complete, the forces are build in
;;		force number order. First 0, than 1, last 9.
;;
;;	(ai:attack-with-force force) (ai-attack-with-force 1)
;;
;;		Attack the opponent with a force.
;;
;;	(ai:sleep frames) (ai:sleep 1000)
;;
;;		Wait some frames, to let the opponent recover.
;;
;;	(ai:research upgrade) (ai:research 'upgrade-shield1)
;;
;;		Let the AI research an upgrade, upgrades are reseached in
;;		command order. And automatic researched if lost.
;;		Building orders have a higher priority.
;;
;;	(ai:upgrade-to unit-type) (ai:upgrade-to 'unit-keep)
;;
;;		Upgrade units to an improved type. You must give for each
;;		unit you want to upgrade an upgrade command. The computer
;;		automatic searches which unit it upgrades.
;;
;;	(ai:script list) (ai:script '(...))
;;
;;		Execute a new script, can be used for loops, subroutines.
;;
;;	(ai:restart) (ai:restart)
;;
;;		Restart with the main AI script.
;;
;; ----------------------------------------------------------------------------
;;	Planned, not ready.
;;
;;	Enable or disable the AI cheating on unexplored area.
;;	    (set-cheat-unexplored! #t)
;;		The AI sees all area explored.
;;	    (set-cheat-unexplored! #f)
;;		The AI sees unexplored area as it is.
;;
;;	(set-cheat-unexplored! #t)
;;
;;	Enable or disable the AI cheating on visible area.
;;	    (set-cheat-visible! #t)
;;		The AI sees all area visible.
;;	    (set-cheat-visible! #f)
;;		The AI sees visible area as it is.
;;
;;	(set-cheat-visible! #t)
;;


;;(define-ai-action '(defense attack)
;;    '(
;;	(
;;	    availables-orc-units
;;	    ai:send-all:get-needs
;;	    ai:default-defend
;;	)
;;	(
;;		unit-ogre-mage
;;	   	unit-ogre
;;		unit-catapult	
;;		unit-axethrower	
;;		unit-berserker
;;		unit-grunt
;;		unit-death-knight
;;		unit-dragon))
;;)

;;(define-ai-action '(defense attack)
;;    '(
;;	(
;;	    availables-human-units
;;	    ai:send-all:get-needs
;;	    ai:default-defend
;;	)
;;	(
;;	   	unit-knight	
;;		unit-ballista
;;		unit-archer
;;		unit-footman
;;		unit-mage
;;		unit-gryphon-rider))
;;)

;; Define the script's properties ( rules used to choose a script... ) 
(define-ai-action '(defense attack)
  '(
    (	
     ;; name
     soldier-only 
     ;; lambda for getting needs
     ai:ground-get-needs
     ;; Ai Script to execute when ready
     ai:default-defend
     )
    
    ;; gauge which must be 0..	    
    (zero-gauges enemy-hotspot-air-force  enemy-hotspot-sea-force)
    
    ;; Global force requirement ( percentages ).
    ;; Must send unit of at least this force... ( can remove allied force ... )
    (force-minimum (enemy-hotspot-ground-force 100) (enemy-map-ground-force 20))
    
    ;; force requirements in units ( percentages )
    ((ai:soldier) (enemy-hotspot-ground-force 110))
    ))

;; Same, but send only peont ( as last chance defense... )
(define-ai-action '(defense)
  '(
    (
     ;; name
     last-chance-defense
     ;; lambda for getting needs
     ai:ground-get-needs
     ;; Ai Script to execute when ready
     ai:default-defend
     )
    ;; gauge which must be 0..	    
    (zero-gauges enemy-hotspot-air-force  enemy-hotspot-sea-force)
    
    ;; Global force requirement ( percentages ).
    ;; Must send unit of at least this force... ( can remove allied force ... )
    (force-minimum (enemy-hotspot-ground-force 200) (enemy-map-ground-force 20))

    ;; force requirements in units ( percentages )
    ((ai:worker) (enemy-hotspot-ground-force 110))))

(define-ai-action '(defense attack)
  '(
    (	
     ;; name
     air-rush 
     ;; lambda for getting needs
     ai:default-get-needs
     ;; Ai Script to execute when ready
     ai:default-defend
     )
    
    ;; gauge which must be 0 ( none )..	    
    (zero-gauges )
    
    ;; Global force requirement ( percentages ).
    ;; Must send unit of at least this force... ( can remove allied force ... )
    (force-minimum (enemy-hotspot-air-fire 110)	(enemy-map-air-force 25))
    
    ;; force requirements in units ( percentages )
    ((ai:flyer) 
	(enemy-hotspot-air-fire     80) 
	(enemy-hotspot-air-force    30)
	(enemy-hotspot-ground-force 30)
	(enemy-hotspot-sea-force    30)  )
    ))
  
(define-ai-action '(defense attack)
    '(
	;; use battleship &  destroyer
	(
	    ship-rush
	    ai:sea-get-needs
	    ai:default-defend
	)
    	(zero-gauges)
	(force-minimum (enemy-hotspot-sea-force 100) (enemy-map-sea-force 25))
	((ai:battleship)
	    (enemy-hotspot-sea-fire 70)
	    (enemy-hotspot-ground-force 30) (enemy-hotspot-sea-force 30))
	((ai:destroyer)
	    (enemy-hotspot-sea-fire 70)
	    (enemy-hotspot-ground-force 20) (enemy-hotspot-sea-force 20) (enemy-hotspot-air-force 80))
	((ai:scout)
	    (enemy-hotspot-sea-force 1))
	))

(define-ai-action '(defense attack)
    '(
	;; use submarine against blind units
	(
	    submarine-rush
	    ai:sea-only-get-needs
	    ai:default-defend
	)
    	(zero-gauges enemy-hotspot-detectors)
	(force-minimum (enemy-hotspot-sea-force 50) (enemy-map-sea-force 25))
	((ai:submarine) (enemy-hotspot-sea-force 50))
	))

(define-ai-action '(defense attack)
    '(
	(	;; name
	    cavalrie-rush 
	    ;; lambda for getting needs
	    ai:ground-get-needs
	    ;; Ai Script to execute when ready
	    ai:default-defend
	)
	
	;; gauge which must be 0...	    
	(zero-gauges enemy-hotspot-air-force enemy-hotspot-sea-force)
    
	;; Global force requirement ( percentages ).
	;; Must send unit of at least this force... ( can remove allied force ... )
	(force-minimum (enemy-hotspot-ground-force 100) (enemy-map-ground-force 25))
	
	;; force requirements in units ( percentages )
	((ai:cavalrie) (enemy-hotspot-ground-force 130))    
    ))

(define-ai-action '(defense attack)
    '(
	(	;; name
	    ground-mixed-rush 
	    ;; lambda for getting needs
	    ai:ground-get-needs
	    ;; Ai Script to execute when ready
	    ai:default-defend
	)
	;; gauge which must be 0...
	(zero-gauges enemy-hotspot-sea-force)
    
	;; Global force requirement ( percentages ).
	;; Must send unit of at least this force... ( can remove allied force ... )
	(force-minimum (enemy-hotspot-ground-force 100) (enemy-hotspot-air-force 100) 
			(enemy-map-ground-force 25) (enemy-map-air-force 25))
    
	;; force requirements in units ( percentages )
	((ai:shooter)   (enemy-hotspot-ground-force 25)
	    		(enemy-hotspot-air-force 120))
	((ai:cavalrie) 	(enemy-hotspot-ground-force 75))
	((ai:soldier) 	(enemy-hotspot-ground-force 20))
    ))

(define-ai-action '(defense attack)    
    '(
	(	;; name
	    soldier-shooter-rush 
	    ;; lambda for getting needs
	    ai:ground-get-needs
	    ;; Ai Script to execute when ready
	    ai:default-defend
	)
	(zero-gauges enemy-hotspot-sea-force)
	(force-minimum 	(enemy-hotspot-ground-force 100) (enemy-hotspot-air-force 100) 
			(enemy-map-ground-force 25) (enemy-map-air-force 25))
	((ai:shooter)	(enemy-hotspot-ground-force 40)
	    		(enemy-hotspot-air-force 120))
	((ai:soldier)	(enemy-hotspot-ground-force 80))
    ))

;;
;; Check if a list of gauges is 0...
;;
(define ai:check-gauges
    (lambda (gauges) 
	(cond 
	    ((null? gauges)	    #t)
	    ((> (ai:get-gauge (car gauges)) 0) #f)
	    (#t (ai:check-gauges (cdr gauges)))
)))	    

;;
;; Sum a list of gauges pcts
;;
(define ai:sum-gauges-pcts
    (lambda (lst)
	(cond
	    ((null? lst)	0)
	    (#t
		(let(
		    (gauge      (car(car lst)))
		    (pct	(car (cdr(car lst))))
		    (left	(cdr lst)))
		    (+	(* (ai:get-gauge gauge) pct)
		    	(ai:sum-gauges-pcts left))
)))))

;;
;; sum the force of units in a list ( unittype count unittype count ... )
;;
(define ai:unit-list-force
    (lambda (list)
	(cond
	    ((null? list)	0)
	    (#t	
		(+	
		    (* 
			(ai:get-unittype-force (car list)) (cadr list))
		    	(ai:unit-list-force (cddr list))
)))))

;;
;; From a pct list of gauge, return number of wanted units.
;; ( ( unittype1 (gauge %) (gauge %) (gauge %) ) 
;;   ( unittype2 (gauge %) (gauge %) (gauge %) ) ... )
;; => ( unittype1 count1 unittype2 count2 ... )
;;
;; % can be negative.
;;			
(define ai:units_pct_to_wants
    (lambda (pcts)
	(cond
	    ((null? pcts)	'())
	    (#t	
		(let* (	(unittype (ccl:eval (caar pcts) ))
			(gauges_pcts (cdar pcts))
			(want_pct (ai:sum-gauges-pcts gauges_pcts))
			(unit_force (ai:get-unittype-force unittype))
			(wanted (quotient want_pct (* unit_force 100))))
		(if (< wanted 1)
		    (cons unittype (cons 1 (ai:units_pct_to_wants (cdr pcts))))
		    (cons unittype (cons wanted (ai:units_pct_to_wants (cdr pcts))))		    
))))))

;;
;; Add unit to unitlist, until it get the "to" force
;;
;; Only the first unit is incremented
;;
(define complete-force-to
    (lambda (units to)
	(if (< (ai:unit-list-force units) to)
	    (complete-force-to (cons (car units) (cons (+ 1 (cadr units)) (cddr units))) to)
	    units)))

;;
;; Get the list of units required by the script 
;;
(define ai:get-script-unit-list
    (lambda (script)
	(let*
	    ((force-mini-gauges (cdr(caddr script)))
	     (units_pct (cdddr script))
	     (result 0)
	     (force-mini (quotient (ai:sum-gauges-pcts force-mini-gauges) 100))
	     (units (ai:units_pct_to_wants units_pct)))
	  	
	    ;; Build at least one of the first type.
	    (if (null? units)
		(set! units (list (ccl:eval (caar units_pct) ) 1)))
	    
	    ;; Complete if necessary to achieve minimum force ...
	    (set! units (complete-force-to units force-mini))
	    units)))			

;;
;; Evaluate a script.
;; It tries to send as much unit as possible ( from force 0 )
;; script content is : (unittype max) (unittype max) (unittype max) ...
;; 	foce is incremented until it reaches the hotspot enemy-force...
(define ai:send-all:get-needs
    (lambda (script)
	(begin
	    (if (ai:adhoc-force (list 
			(ai:get-gauge 'enemy-hotspot-ground-force)
			(ai:get-gauge 'enemy-hotspot-sea-force)
			(ai:get-gauge 'enemy-hotspot-air-force))
	    	(car (cdr script)))
	    	0
		-1
))))

  
;;
;; Evaluate a script; returns :
;; - nil if nothing possible
;; - a value from 0 (go/ready) to ~(will take eternity to achieve)
;;   ( in this case, the tmp force is filled with script requirements. )
;;
(define ai:default-get-needs
    (lambda (script)
	(let
	    ((gauges (cdadr script)))
	    ;; (force-mini-gauges (cdadr script))
	    ;; (units_pct (cddr script)))
	    
	    (if	(ai:check-gauges gauges)
		(let
		    ((result 0))
		   
		    ;; clear tmp-force
		    (ai:clear-force (ai:own-force))
		    ;; set tmp-force to this script requirement
		    (ai:force-list (cons (ai:own-force) (ai:get-script-unit-list script)))
		    
		    ;; take units from pool force to tmp...
		    (ai:force-complete (ai:own-force))
		    ;; compute cost to complete the tmp force
		    (set! result (ai:evaluate-force-cost (ai:own-force)))
		    
		    ;; return the computed value if can transport
		    (if (ai:can-reach-hotspot 'lazy)
			result
			(begin
				(writes nil "can't reach hotspot\n")
				-1
			))
		)
		;; can't, return -1
		-1
	    )
)))

(define ai:ground-get-needs
    (lambda (script)
	;; Check if hotspot is accessible by ground
	(ai:default-get-needs script)))
	    
(define ai:sea-get-needs
    (lambda (script)
	;; Check if hotspot is accessible by ground
	(ai:default-get-needs script)))
	
(define ai:sea-only-get-needs
    (lambda (script)
	(ai:default-get-needs script)))
	
;;
;; This script is used in the simplest case when : 
;;	- a force ( defend-force ) is ready
;;	- a hotspot is set
;;	- the AI need only to send the defend force there...
;;
(define ai:default-defend
'(
    ;; group the force	    
    (begin	
	    (writes nil "Force will defend/attack now\n")
	    (ai:group-force (ai:own-force))	    
    )

    ;; wait for grouping complete.	
    (if (ai:force-active (ai:own-force)) 
	;; hang...
	(ai:idle)	    
        ;; else attack the hotspot
    	(ai:hotspot-attack-with-force (ai:own-force)))	
    
    ;; The send units back to home (?)
    ;; Fixme : if unit is on ground & no combat => go home 
    (if (ai:force-active (ai:own-force)) (ai:idle))
    
    (begin
	;; Send units home,
	;; and forget about them.
    	(ai:force-go-home (ai:own-force))
    	(ai:clear-force (ai:own-force)))	
))

	       
;;=============================================================================
;;
;;	Define an AI engine.
;;
;;	(define-ai name race class script)
;;
;;	name	name of the AI for selection.
;;	class	class of the AI for map editor.
;;	script	Main AI script.
;;
(define-ai "wc2-passive" "*" "passive"
  '(
    ;;	Define the main AI script.
    (ai:set-auto-attack #f)
    (ai:sleep	10000)
    (ai:restart)
    ))

;;=============================================================================

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  grunt-rush tactics
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define ai:orc-land-rush-endloop
  '((writes nil "Looping !\n")
    (ai:force 0 'unit-grunt 15 'unit-ogre-mage 9 'unit-catapult 3)
;;    (ai:force 1 'unit-grunt 20)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
    (ai:sleep 5000)
    (ai:script ai:orc-land-rush-endloop) ) )

(define-ai 'rush race2 "gruntrush"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:need (unit-type 'unit-great-hall))
    (ai:set  'unit-peon 1)
    (ai:wait 'unit-great-hall)
    (ai:wait 'unit-peon)	;; start hangs if nothing available

    (ai:set  'unit-peon 10)
    (ai:set  'unit-pig-farm 2)
    (ai:need 'unit-mythical-barracks)
    (ai:need 'unit-mythical-blacksmith)
;;    (ai:force 1 'unit-grunt 1)
    (ai:force 0 'unit-grunt 1)
    (ai:force 1 'unit-grunt 2)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
    (ai:sleep 20)

    (ai:force 0 'unit-grunt 2)
    (ai:research 'upgrade-battle-axe1)
    (ai:research 'upgrade-orc-shield1)
    (ai:research 'upgrade-battle-axe2)
    (ai:research 'upgrade-orc-shield2)
    (ai:set  'unit-peon 20)
    (ai:force 0 'unit-grunt 6)
    (ai:force 1 'unit-grunt 6)
;;    (ai:wait-force 1)		;; wait until attack party is completed
    (ai:set 'unit-mythical-barracks 3)
    (ai:force 0 'unit-grunt 20)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

    (ai:set 'unit-mythical-barracks 6)
    (ai:force 0 'unit-grunt 40)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
    (ai:set  'unit-pig-farm 25)


;;    (ai:force 0 'unit-grunt )
;;    (ai:force 2 'unit-grunt 20)
;;    (ai:wait-force 2)		;; wait until attack party is completed
;;    (ai:attack-with-force 2)

;;    (ai:force 0 'unit-grunt 15)
;;   (ai:force 1 'unit-grunt 20)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

    (ai:need (unit-type 'unit-great-hall))

;;    (ai:force 0 'unit-grunt 15)
;;    (ai:force 2 'unit-grunt 80)
;;    (ai:wait-force 2)		;; wait until attack party is completed
;;    (ai:attack-with-force 2)

;;    (ai:force 1 'unit-grunt 20)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

;;    (ai:force 2 'unit-grunt 20)
;;    (ai:wait-force 2)		;; wait until attack party is completed
;;    (ai:attack-with-force 2)

;;    (ai:force 1 'unit-grunt 20)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

;;    (ai:force 2 'unit-grunt 20)
;;    (ai:wait-force 2)		;; wait until attack party is completed
;;    (ai:attack-with-force 2)





;;    (ai:force 1 'unit-grunt 9)
;;    (ai:force 2 'unit-grunt 4)
;;    (ai:force 3 'unit-grunt 5)
;;    (ai:wait-force 3)		;; wait until attack party is completed
;;    (ai:attack-with-force 3)
;;    (ai:wait-force 2)		;; wait until attack party is completed
;;    (ai:attack-with-force 2)

    (ai:set 'unit-ogre-mound 1)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
;;    (ai:force 0 'unit-grunt 9)
;;    (ai:force 4 'unit-grunt 9)

    (ai:set  'unit-peon 25)

    (ai:set  'unit-pig-farm 20)
    (ai:force 0 'unit-grunt 9 'unit-ogre 1)
;;    (ai:force 1 'unit-grunt 9)
;;    (ai:force 2 'unit-grunt 9)
;;    (ai:force 3 'unit-grunt 12)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:wait-force 2)		;; wait until attack party is completed
    (ai:set 'unit-mythical-barracks 9)
;;    (ai:attack-with-force 1)
;;    (ai:attack-with-force 2)

    (ai:force 0 'unit-grunt 9 'unit-ogre 3)
;;    (ai:force 1 'unit-grunt 14)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
;;    (ai:attack-with-force 3)

    (ai:sleep 5000)

    (ai:force 0 'unit-grunt 50 'unit-axethrower 2 'unit-ogre 10 'unit-catapult 1)
;;    (ai:force 1 'unit-grunt 9)
;;    (ai:force 2 'unit-grunt 9)
;;    (ai:force 3 'unit-grunt 9)
;;    (ai:force 4 'unit-grunt 4)
;;    (ai:force 5 'unit-grunt 9 'unit-ogre 3)
;;    (ai:wait-force 4)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
;;    (ai:attack-with-force 2)
;;    (ai:attack-with-force 3)
;;    (ai:attack-with-force 4)

;;    (ai:force 6 'unit-grunt 19)
;;    (ai:force 7 'unit-grunt 19)

;;    (ai:force 0 'unit-grunt 9 'unit-axethrower 9 'unit-ogre 9 'unit-catapult 2)
;;    (ai:force 1 'unit-grunt 9 'unit-ogre 3)
;;    (ai:wait-force 5)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
;;    (ai:attack-with-force 5)
;;    (ai:attack-with-force 6)
;;    (ai:attack-with-force 7)

;;    (ai:force 1 'unit-grunt 9 'unit-ogre 2)
;;    (ai:force 2 'unit-grunt 9)
;;    (ai:wait-force 2)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
;;    (ai:attack-with-force 2)

;;    (ai:force 1 'unit-grunt 11 'unit-ogre 4)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

;;    (ai:force 1 'unit-grunt 15)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

;;    (ai:force 1 'unit-grunt 11 'unit-ogre 4)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

;;    (ai:force 1 'unit-grunt 15)
;;    (ai:wait-force 1)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)

	(ai:sleep 500)
    (ai:force 0 'unit-grunt 1 'unit-axethrower 0
	'unit-ogre-mage 6 'unit-catapult 1 'unit-death-knight 5)
;;    (ai:force 1 'unit-grunt 1 'unit-axethrower 0 'unit-ranger 2
;;	'unit-ogre-mage 2 'unit-catapult 1 'unit-death-knight 1)
;;    (ai:force 2 'unit-dragon 1)
;;    (ai:wait-force 2)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
;;    (ai:attack-with-force 2)

    ;;(ai:sleep 500)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-cannon-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:research 'upgrade-catapult1)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-cannon-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:research 'upgrade-catapult2)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-cannon-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:set  'unit-peon 25)

    ;; Everything researched...

    (ai:script ai:orc-land-rush-endloop) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  goldfever tactics
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define ai:orc-goldfever-endloop
  '((writes nil "Looping !\n")
    (ai:force 0 'unit-grunt 15)

    (ai:sleep 500)
    (ai:script ai:orc-goldfever-endloop) ) )

(define-ai 'goldfever race2 "goldfever"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:need (unit-type 'unit-great-hall))
    (ai:set  'unit-peon 1)
    (ai:wait 'unit-great-hall)
    (ai:wait 'unit-peon)	;; start hangs if nothing available

    (ai:set  'unit-pig-farm 1)

    (ai:set  'unit-peon 5)
    (ai:wait 'unit-peon)

    (ai:need 'unit-mythical-barracks)

    (ai:set  'unit-peon 50)
    (ai:script ai:orc-goldfever-endloop) ))

;;=============================================================================
;;	Air Attack AI, this is an example for a multi race AI.
;;=============================================================================

;;
;;	City-center of the current race.
;;
(define (ai:city-center)
  (if (eq? (ai:get-race) race1)
      'unit-town-hall 'unit-great-hall) )

;;
;;	Better city-center of the current race.
;;
(define (ai:better-city-center)
  (if (eq? (ai:get-race) race1)
      'unit-keep 'unit-stronghold) )

;;
;;	Best city-center of the current race.
;;
(define (ai:best-city-center)
  (if (eq? (ai:get-race) race1)
      'unit-castle 'unit-fortress) )

;;
;;	Worker of the current race.
;;
(define (ai:worker)
  (if (eq? (ai:get-race) race1)
      'unit-peasant 'unit-peon) )

;;
;;	Lumber mill of the current race.
;;
(define (ai:lumber-mill)
  (if (eq? (ai:get-race) race1)
      'unit-elven-lumber-mill 'unit-troll-lumber-mill) )

;;
;;	Blacksmith of the current race.
;;
(define (ai:blacksmith)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-blacksmith 'unit-mythical-blacksmith) )

;;
;;	Upgrade armor 1 of the current race.
;;
(define (ai:upgrade-armor-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-human-shield1 'upgrade-orc-shield1) )

;;
;;	Upgrade armor 2 of the current race.
;;
(define (ai:upgrade-armor-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-human-shield2 'upgrade-orc-shield2) )

;;
;;	Upgrade weapon 1 of the current race.
;;
(define (ai:upgrade-weapon-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-sword1 'upgrade-battle-axe1) )

;;
;;	Upgrade weapon 2 of the current race.
;;
(define (ai:upgrade-weapon-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-sword2 'upgrade-battle-axe2) )

;;
;;	Upgrade missile 1 of the current race.
;;
(define (ai:upgrade-missile-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-arrow1 'upgrade-throwing-axe1) )

;;
;;	Upgrade missile 2 of the current race.
;;
(define (ai:upgrade-missile-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-arrow2 'upgrade-throwing-axe2) )

;;
;;	Upgrade catapult 1 of the current race.
;;
(define (ai:upgrade-catapult-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-ballista1 'upgrade-catapult1) )

;;
;;	Upgrade catapult 2 of the current race.
;;
(define (ai:upgrade-catapult-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-ballista2 'upgrade-catapult2) )

;;
;;	Research of the current race.
;;
(define (ai:scientific)
  (if (eq? (ai:get-race) race1)
      'unit-inventor 'unit-alchemist) )

;;
;;	Cavalry of the current race.
;;
(define (ai:cavalry)
  (if (eq? (ai:get-race) race1)
      'unit-stables 'unit-ogre-mound) )

;;
;;	Temple of the current race.
;;
(define (ai:temple)
  (if (eq? (ai:get-race) race1)
      'unit-church 'unit-altar-of-storms) )

;;
;;	Airport of the current race.
;;
(define (ai:airport)
  (if (eq? (ai:get-race) race1)
      'unit-gryphon-aviary 'unit-dragon-roost) )

;;
;;	Barracks of the current race.
;;
(define (ai:barracks)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-barracks 'unit-mythical-barracks) )

;;
;;	Soldier of the current race.
;;
(define (ai:soldier)
  (if (eq? (ai:get-race) race1)
      'unit-footman 'unit-grunt) )

;;
;;	Shooter of the current race.
;;
(define (ai:shooter)
  (if (eq? (ai:get-race) race1)
      'unit-archer 'unit-axethrower) )

;;
;;	Elite Shooter of the current race.
;;
(define (ai:elite-shooter)
  (if (eq? (ai:get-race) race1)
      'unit-ranger 'unit-berserker) )

;;
;;	Cavalrie of the current race.
;;
(define (ai:cavalrie)
  (if (eq? (ai:get-race) race1)
      'unit-knight 'unit-ogre) )

;;
;;	Cavalrie mages of the current race.
;;
(define (ai:cavalrie-mage)
  (if (eq? (ai:get-race) race1)
      'unit-paladin 'unit-ogre-mage) )

;;
;;	Mage of the current race.
;;
(define (ai:mage)
  (if (eq? (ai:get-race) race1)
      'unit-mage 'unit-death-knight) )

;;
;;	Catapult of the current race.
;;
(define (ai:catapult)
  (if (eq? (ai:get-race) race1)
      'unit-ballista 'unit-catapult) )

;;
;;	Scout of the current race.
;;
(define (ai:scout)
  (if (eq? (ai:get-race) race1)
      'unit-balloon 'unit-zeppelin) )

;;
;;	Flyer of the current race.
;;
(define (ai:flyer)
  (if (eq? (ai:get-race) race1)
      'unit-gryphon-rider 'unit-dragon) )

;;
;;	Tower of the current race.
;;
(define (ai:tower)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-watch-tower 'unit-mythical-watch-tower) )

;;
;;	Guard-Tower of the current race.
;;
(define (ai:guard-tower)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-guard-tower 'unit-mythical-guard-tower) )

;;
;;	Cannon-Tower of the current race.
;;
(define (ai:cannon-tower)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-cannon-tower 'unit-mythical-cannon-tower) )

;;
;;	Harbor of the current race.
;;
(define (ai:harbor)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-shipyard 'unit-mythical-shipyard) )

;;
;;	Refinery of the current race.
;;
(define (ai:refinery)
  (if (eq? (ai:get-race) race1)
      'unit-human-refinery 'unit-orc-refinery) )

;;
;;	Foundry of the current race.
;;
(define (ai:foundry)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-foundry 'unit-mythical-foundry) )

;;
;;	Ship armor 1 of the current race.
;;
(define (ai:upgrade-ship-armor-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-human-ship-armor1 'upgrade-orc-ship-armor1) )

;;
;;	Ship armor 2 of the current race.
;;
(define (ai:upgrade-ship-armor-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-human-ship-armor2 'upgrade-orc-ship-armor2) )

;;
;;	Ship weapon 1 of the current race.
;;
(define (ai:upgrade-ship-cannon-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-human-ship-cannon1 'upgrade-orc-ship-cannon1) )

;;
;;	Ship weapon 2 of the current race.
;;
(define (ai:upgrade-ship-cannon-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-human-ship-cannon2 'upgrade-orc-ship-cannon2) )

;;
;;	Platform of the current race.
;;
(define (ai:platform)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-oil-platform 'unit-mythical-oil-platform) )

;;
;;	Tanker of the current race.
;;
(define (ai:tanker)
  (if (eq? (ai:get-race) race1)
      'unit-human-oil-tanker 'unit-orc-oil-tanker) )

;;
;;	Submarine of the current race.
;;
(define (ai:submarine)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-submarine 'unit-mythical-submarine) )

;;
;;	Destroyer of the current race.
;;
(define (ai:destroyer)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-destroyer 'unit-mythical-destroyer) )

;;
;;	Battleship of the current race.
;;
(define (ai:battleship)
  (if (eq? (ai:get-race) race1)
      'unit-battleship 'unit-ogre-juggernaught) )

;;
;;	Transporter of the current race.
;;
(define (ai:transporter)
  (if (eq? (ai:get-race) race1)
      'unit-alliance-transport 'unit-mythical-transport) )

;;
;;	1st Elite Shooter of the current race.
;;
(define (ai:upgrade-elite-shooter)
  (if (eq? (ai:get-race) race1)
      'upgrade-ranger 'upgrade-berserker) )

;;
;;	1st Upgrade of elite Shooter of the current race.
;;
(define (ai:upgrade-elite-shooter-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-ranger-scouting 'upgrade-berserker-scouting) )

;;
;;	2nd Upgrade of elite Shooter of the current race.
;;
(define (ai:upgrade-elite-shooter-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-longbow 'upgrade-light-axes) )

;;
;;	3th Upgrade of elite Shooter of the current race.
;;
(define (ai:upgrade-elite-shooter-3)
  (if (eq? (ai:get-race) race1)
      'upgrade-ranger-marksmanship 'upgrade-berserker-regeneration) )

;;
;;	Upgrade cavalrie to cavalrie mages of the current race.
;;
(define (ai:upgrade-cavalrie-mage)
  (if (eq? (ai:get-race) race1)
      'upgrade-paladin 'upgrade-ogre-mage) )

;;
;;	1st spell of the cavalrie mages of the current race.
;;
(define (ai:cavalrie-mage-spell-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-healing 'upgrade-bloodlust))

;;
;;	2nd spell of the cavalrie mages of the current race.
;;
(define (ai:cavalrie-mage-spell-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-exorcism 'upgrade-runes))

;;
;;	1st spell of the mages of the current race.
;;
(define (ai:mage-spell-1)
  (if (eq? (ai:get-race) race1)
      'upgrade-slow 'upgrade-haste))

;;
;;	2nd spell of the mages of the current race.
;;
(define (ai:mage-spell-2)
  (if (eq? (ai:get-race) race1)
      'upgrade-flame-shield 'upgrade-raise-dead))

;;
;;	3th spell of the mages of the current race.
;;
(define (ai:mage-spell-3)
  (if (eq? (ai:get-race) race1)
      'upgrade-invisibility 'upgrade-whirlwind))

;;
;;	4th spell of the mages of the current race.
;;
(define (ai:mage-spell-4)
  (if (eq? (ai:get-race) race1)
      'upgrade-polymorph 'upgrade-unholy-armor))

;;
;;	5th spell of the mages of the current race.
;;
(define (ai:mage-spell-5)
  (if (eq? (ai:get-race) race1)
      'upgrade-blizzard 'upgrade-death-and-decay))

;;=============================================================================
;;
;;	Define an AI engine.
;;
;;	(define-ai name race class script)
;;
;;	name	name of the AI for selection.
;;	class	class of the AI for map editor.
;;	script	Main AI script.
;;
(define ai:air-attack-endloop
  '((writes nil "Looping !\n")
;;    (ai:force 1 (ai:flyer) 2)
;;    (ai:force 2 (ai:flyer) 2)
;;    (ai:force 3 (ai:flyer) 2)
;;    (ai:force 4 (ai:flyer) 2)
;;    (ai:force 5 (ai:flyer) 2)
;;    (ai:force 6 (ai:flyer) 1)
;;    (ai:wait-force 5)
;;    (ai:wait-force 6)		;; wait until attack party is completed
;;    (ai:attack-with-force 1)
;;    (ai:attack-with-force 2)
;;    (ai:attack-with-force 3)
;;    (ai:attack-with-force 4)
;;    (ai:attack-with-force 5)
    (ai:sleep 500)
    (ai:script ai:air-attack-endloop) ))

(define-ai "wc2-air-attack" "*" "air-attack"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)  (ai:sleep (ai:get-sleep-cycles)))
    (ai:set-reserve! #( 0  0 0 0  0 0 0))
    (ai:need (ai:city-center))
    (ai:set  (ai:worker) 1)
    (ai:wait (ai:city-center))
    (ai:wait (ai:worker))	;; start hangs if nothing is available

    (ai:set  (ai:worker) 12)     
    
    (ai:need (ai:lumber-mill))
    (ai:wait (ai:lumber-mill))
    
    (ai:need (ai:barracks))
    (ai:wait (ai:barracks))
    (ai:force 0 (ai:soldier) 2)
;;    (ai:wait-force 0)		;; wait until defence is ready

    (ai:need (ai:blacksmith))
    (ai:wait (ai:blacksmith))
    (ai:upgrade-to (ai:better-city-center))
    (ai:set  (ai:worker) 20)
    (ai:force 0 (ai:soldier) 2 (ai:shooter) 3)
    (ai:wait (ai:better-city-center))

    (ai:need (ai:cavalry))
    
    (ai:need (ai:tower))
    (ai:wait (ai:tower))
    
    (ai:upgrade-to (ai:guard-tower))    
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))
    (ai:upgrade-to (ai:best-city-center))
    (ai:wait (ai:best-city-center))	;; need this for airport!

    (ai:need (ai:airport))
    
    ;; Force 1 is attack reserve.
    (ai:force 1 (ai:flyer) 2)
    (ai:wait-force 1)
    
    (ai:set-auto-attack #t)
    (ai:sleep 500)
    (ai:need (ai:city-center))
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))
    (ai:need (ai:airport))
    (ai:force 0 (ai:flyer) 3)

    (ai:need (ai:city-center))
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))
    (ai:need (ai:airport))
    (ai:set  (ai:worker) 20)
    (ai:force 1 (ai:flyer) 4)

    (ai:sleep 1200)
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:cannon-tower))

    (ai:sleep 1200)
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))
    (ai:need (ai:tower))

    (ai:sleep 1200)
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))
    (ai:force 1 (ai:flyer) 6)

    (ai:sleep 1200)
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))

    (ai:sleep 1200)
    (ai:need (ai:tower))
    (ai:upgrade-to (ai:guard-tower))
    (ai:need (ai:tower))

    (ai:sleep 1200)
    (ai:force 1 (ai:flyer) 10)

    (ai:research 'upgrade-sword1)
    (ai:research 'upgrade-human-shield1)
    (ai:research 'upgrade-arrow1)
    (ai:research 'upgrade-sword2)
    (ai:research 'upgrade-human-shield2)
    (ai:research 'upgrade-arrow2)

    (ai:sleep 500)
    (ai:script ai:air-attack-endloop) ))

;;=============================================================================
;;
;;	Define an AI engine.
;;
;;	(define-ai name race class script)
;;
;;	name	name of the AI for selection.
;;	class	class of the AI for map editor.
;;	script	Main AI script.
;;
(define ai:sea-attack-endloop
  '((writes nil "Looping !\n")
    (ai:force 0 
	      (ai:destroyer) 6 (ai:battleship) 7 (ai:scout) 1
	      (ai:soldier) 4 (ai:cavalrie) 4 (ai:catapult) 4
	      (ai:transporter) 4)
    (ai:sleep 500)
    (ai:script ai:sea-attack-endloop) ))

(define-ai "wc2-sea-attack" "*" "sea-attack"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:set-auto-attack #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:need (ai:city-center))
    (ai:set  (ai:worker) 1)
    (ai:wait (ai:city-center))
    (ai:wait (ai:worker))	;; start hangs if nothing is available

    (ai:set  (ai:worker) 12)    
    (ai:need (ai:lumber-mill))
    (ai:wait (ai:lumber-mill))
    
    (ai:need (ai:barracks))
    (ai:wait (ai:barracks))

    ;;    (ai:wait-force 0)		;; wait until defence is ready
    (ai:set  (ai:worker) 15)
    
    (ai:sleep 1000)
    
    (ai:need (ai:harbor))
    (ai:wait (ai:harbor))
    
    (ai:upgrade-to (ai:better-city-center))
    (ai:need (ai:refinery))
    (ai:wait (ai:refinery))
    
    (ai:need (ai:scientific))
    
    (ai:set  (ai:worker) 20)
    
    (ai:set  (ai:tanker) 1)
    (ai:need (ai:platform))
    (ai:wait (ai:better-city-center))

    (ai:set  (ai:tanker) 3)
    (ai:force 0 (ai:soldier) 3 (ai:submarine) 2)
    (ai:force 1 (ai:submarine) 2)
    (ai:wait-force 1)		;; wait until attack force is ready
    
;;    (ai:attack-with-force 1)

    (ai:sleep 500)
    (ai:need (ai:foundry))
    (ai:research (ai:upgrade-ship-armor-1))
    (ai:research (ai:upgrade-ship-armor-2))
    (ai:set  (ai:tanker) 4)
    (ai:force 1 (ai:submarine) 4)
    (ai:wait-force 1)    
    
    (ai:set-auto-attack #t)
;;    (ai:wait-force 1)		;; wait until attack force is ready
;;    (ai:attack-with-force 1)

    (ai:sleep 500)
    (ai:need (ai:harbor))
    (ai:need (ai:blacksmith))
    (ai:force 0 (ai:submarine) 5 (ai:scout) 1)
;;    (ai:wait-force 1)		;; wait until attack force is ready
;;    (ai:attack-with-force 1)

    (ai:sleep 500)
    (ai:research (ai:upgrade-catapult-1))
    (ai:need (ai:cavalry))
    (ai:force 0 (ai:soldier) 3 (ai:catapult) 1 (ai:scout) 1 (ai:submarine) 1 (ai:destroyer) 2 (ai:battleship) 1 )
    (ai:force 1 (ai:scout) 1 (ai:destroyer) 2 (ai:battleship) 2)
    
    (ai:sleep 3000)
;;    (ai:wait-force  1)
;;    (ai:attack-with-force 1)

    (ai:force 0 
	      (ai:soldier) 3 (ai:catapult) 2 (ai:scout) 3 (ai:submarine) 1 (ai:destroyer) 2 (ai:battleship) 2 (ai:transporter) 1)
    (ai:force 1 (ai:scout) 2 (ai:destroyer) 3 (ai:battleship) 3)
;;    (ai:force 2 (ai:catapult) 2 )
;;    (ai:wait-force  1)
;;    (ai:attack-with-force 1)

    (ai:sleep 500)
    (ai:research (ai:upgrade-catapult-2))
    (ai:research (ai:upgrade-ship-cannon-1))
    (ai:force 0 (ai:cavalrie) 1 (ai:soldier) 3 (ai:catapult) 1 (ai:scout) 2 (ai:destroyer) 4 (ai:battleship) 5 (ai:submarine) 3 (ai:transporter) 2)

    (ai:sleep 500)
    (ai:research (ai:upgrade-ship-cannon-2))
    (ai:need (ai:city-center))
    (ai:force 0 (ai:cavalrie) 2 (ai:soldier) 5 (ai:catapult) 3 (ai:scout) 3 (ai:destroyer) 6 (ai:battleship) 6 (ai:submarine) 3 (ai:transporter) 3)

    (ai:sleep 500)
    (ai:need (ai:harbor))
    (ai:research (ai:upgrade-weapon-1))
    (ai:sleep 500)
    (ai:research (ai:upgrade-armor-1))
    (ai:sleep 500)
    (ai:research (ai:upgrade-weapon-2))
    (ai:sleep 500)
    (ai:research (ai:upgrade-armor-2))
    (ai:set  (ai:tanker) 5)

    (ai:sleep 500)

    (ai:sleep 500)
    (ai:script ai:sea-attack-endloop) ))

;;=============================================================================
;;
;;	Define an AI engine.
;;
;;	(define-ai name race class script)
;;
;;	name	name of the AI for selection.
;;	class	class of the AI for map editor.
;;	script	Main AI script.
;;
(define ai:human-land-attack-endloop
  '((writes nil "Looping !\n")
    (ai:force 0 'unit-footman 2 'unit-ranger 4 'unit-paladin 8 'unit-ballista 2	'unit-mage 6 'unit-gryphon-rider 3)

    (ai:sleep 500)
    (ai:script ai:human-land-attack-endloop) ) )

(define-ai 'my-ai1 race1 "land-attack"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:need (unit-type 'unit-town-hall))
    (ai:set  'unit-peasant 1)
    (ai:wait 'unit-town-hall)
    (ai:wait 'unit-peasant)	;; start hangs if nothing available

    (ai:set  'unit-peasant 4)
    (ai:need 'unit-elven-lumber-mill)
    (ai:need 'unit-alliance-barracks)
    (ai:force 1 'unit-footman 3)

    (ai:set  'unit-peasant 9)
    (ai:sleep	1000)
    (ai:need 'unit-alliance-blacksmith)
    (ai:force 1 'unit-footman 4 'unit-archer 2)
    (ai:force 0 'unit-footman 4 'unit-archer 2)

    (ai:sleep	1000)
    (ai:research 'upgrade-sword1)
    (ai:research 'upgrade-human-shield1)
    (ai:research 'upgrade-arrow1)
    (ai:research 'upgrade-sword2)
    (ai:research 'upgrade-human-shield2)
    (ai:research 'upgrade-arrow2)
    (ai:need 'unit-alliance-barracks)

    (ai:force 0 'unit-footman 6 'unit-archer 3)

    (ai:sleep	1000)
    (ai:set  'unit-peasant 15)
    (ai:force 0 'unit-footman 6 'unit-archer 3 'unit-ballista 1)
    (ai:force 1 'unit-footman 6 'unit-archer 3 'unit-ballista 1)

    (ai:sleep	2000)
    (ai:upgrade-to 'unit-keep)
    (ai:wait 'unit-keep)

    (ai:sleep	2000)
    (ai:need 'unit-town-hall)
    (ai:need 'unit-stables)
    (ai:force 0 'unit-footman 1 'unit-archer 4 'unit-knight 4 'unit-ballista 2)
    (ai:force 1 'unit-footman 1 'unit-archer 4 'unit-knight 10 'unit-ballista 2)
    
    (ai:sleep	4000)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-alliance-barracks)
    (ai:upgrade-to 'unit-castle)
    (ai:set  'unit-peasant 22)
    (ai:wait 'unit-castle)

    (ai:sleep	2000)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-church)
    (ai:research 'upgrade-paladin)
    (ai:research 'upgrade-healing)
    (ai:research 'upgrade-exorcism)

    (ai:force 0 'unit-footman 1 'unit-archer 2 'unit-paladin 5 'unit-ballista 1)
    (ai:force 1 'unit-footman 1 'unit-archer 6 'unit-paladin 12 'unit-ballista 4)

    (ai:sleep	1000)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-mage-tower)
    (ai:research 'upgrade-polymorph)
    (ai:research 'upgrade-blizzard)

    (ai:force 0 'unit-footman 1 'unit-archer 3 'unit-paladin 10 'unit-ballista 3
	'unit-mage 1)
    (ai:force 0 'unit-mage 2)
    (ai:set  'unit-peasant 30)
    (ai:sleep	1000)
    (ai:research 'upgrade-slow)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:research 'upgrade-invisibility)

    (ai:force 1 'unit-footman 1 'unit-archer 8 'unit-paladin 18 'unit-ballista 4 'unit-mage 5)

    (ai:sleep	1000)
    (ai:need 'unit-gryphon-aviary)

    (ai:force 0 'unit-gryphon-rider 1)
    (ai:force 1 'unit-gryphon-rider 2)
    
    (ai:sleep	2000)
    (ai:research 'upgrade-ranger)
    (ai:research 'upgrade-ranger-scouting)
    (ai:research 'upgrade-flame-shield)

    (ai:sleep	1000)
    (ai:need 'unit-town-hall)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:need 'unit-inventor)
    (ai:research 'upgrade-longbow)

    (ai:sleep	1000)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:research 'upgrade-ballista1)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-cannon-tower)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-guard-tower)
    (ai:research 'upgrade-ballista2)
    (ai:need 'unit-alliance-watch-tower)
    (ai:upgrade-to 'unit-alliance-cannon-tower)
    (ai:set  'unit-peasant 35)

    ;; Everything researched...

    (ai:script ai:human-land-attack-endloop) ))

;;=============================================================================
;;
;;	Define an AI engine.
;;
;;	(define-ai name race class script)
;;
;;	name	name of the AI for selection.
;;	class	class of the AI for map editor.
;;	script	Main AI script.
;;
(define ai:orc-land-attack-endloop
  '((writes nil "Looping !\n")

    (ai:sleep 500)
    (ai:script ai:orc-land-attack-endloop) ) )

(define-ai 'my-ai2 race2 "land-attack"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:need (unit-type 'unit-great-hall))
    (ai:set  'unit-peon 1)
    (ai:wait 'unit-great-hall)
    (ai:wait 'unit-peon)	;; start hangs if nothing available

    (ai:set  'unit-peon 4)
    (ai:need 'unit-troll-lumber-mill)
    (ai:need 'unit-mythical-barracks)
    (ai:force 1 'unit-grunt 3)

    (ai:set  'unit-peon 9)
    (ai:sleep	1000)
    (ai:need 'unit-mythical-blacksmith)
    (ai:force 0 'unit-grunt 4 'unit-axethrower 2)
    (ai:force 1 'unit-grunt 4 'unit-axethrower 2)

    (ai:sleep	1000)

    (ai:research 'upgrade-battle-axe1)
    (ai:research 'upgrade-orc-shield1)
    (ai:research 'upgrade-throwing-axe1)
    (ai:research 'upgrade-battle-axe2)
    (ai:research 'upgrade-orc-shield2)
    (ai:research 'upgrade-throwing-axe2)
    (ai:need 'unit-mythical-barracks)

    (ai:force 0 'unit-grunt 6 'unit-axethrower 4)

    (ai:sleep	1000)
    (ai:set  'unit-peon 15)
    (ai:force 0 'unit-grunt 4 'unit-axethrower 2 'unit-catapult 1)
    (ai:force 1 'unit-grunt 4 'unit-axethrower 2 'unit-catapult 2)

    (ai:sleep	2000)
    (ai:upgrade-to 'unit-stronghold)
    (ai:wait 'unit-stronghold)

    (ai:force 0 'unit-grunt 7 'unit-axethrower 3 'unit-catapult 1)

    (ai:sleep	2000)
    (ai:need 'unit-great-hall)
    (ai:need 'unit-ogre-mound)
    (ai:force 0 'unit-grunt 1 'unit-axethrower 3 'unit-ogre 5 'unit-catapult 2)
    (ai:force 1 'unit-grunt 1 'unit-axethrower 5 'unit-ogre 10 'unit-catapult 2)

    (ai:sleep	4000)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-mythical-barracks)
    (ai:upgrade-to 'unit-fortress)
    (ai:set  'unit-peon 22)
    (ai:wait 'unit-fortress)

    (ai:sleep	2000)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-altar-of-storms)
    (ai:research 'upgrade-ogre-mage)
    (ai:research 'upgrade-bloodlust)
    (ai:research 'upgrade-runes)

    (ai:force 0 'unit-grunt 1 'unit-axethrower 2 'unit-ogre-mage 5 'unit-catapult 2)
    (ai:force 1 'unit-grunt 1 'unit-axethrower 6 'unit-ogre-mage 12 'unit-catapult 4)

    (ai:sleep	1000)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-temple-of-the-damned)
    (ai:research 'upgrade-unholy-armor)
    (ai:research 'upgrade-death-and-decay)

    (ai:force 0 'unit-grunt 1 'unit-axethrower 2 'unit-ogre-mage 10 'unit-catapult 2 'unit-death-knight 2)

    (ai:sleep 	1000)
    (ai:research 'upgrade-haste)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:research 'upgrade-whirlwind)

    (ai:force 0 'unit-grunt 1 'unit-axethrower 5 'unit-ogre-mage 16 'unit-catapult 3 'unit-death-knight 5)
    (ai:force 1 'unit-grunt 1 'unit-axethrower 8 'unit-ogre-mage 16 'unit-catapult 4 'unit-death-knight 5)
    (ai:set  'unit-peon 30)
    (ai:research 'upgrade-berserker)
    (ai:sleep	2000)
    (ai:need 'unit-dragon-roost)

    (ai:sleep	1000)

    (ai:research 'upgrade-berserker-scouting)
    (ai:research 'upgrade-raise-dead)
    (ai:force 0 'unit-grunt 1 'unit-axethrower 4 'unit-ogre-mage 16 'unit-catapult 3 'unit-death-knight 6 'unit-dragon 1)
    (ai:force 1 'unit-dragon 3)

    (ai:sleep	1000)
    (ai:need 'unit-great-hall)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:need 'unit-alchemist)
    (ai:research 'upgrade-light-axes)

    (ai:sleep	1000)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:research 'upgrade-catapult1)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-cannon-tower)
    (ai:research 'upgrade-catapult2)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-cannon-tower)
    (ai:need 'unit-mythical-watch-tower)
    (ai:upgrade-to 'unit-mythical-guard-tower)
    (ai:set  'unit-peon 35)

    ;; Everything researched...

    (ai:script ai:orc-land-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and tankers and oil platform.
;;		Also if needed a farm.
;;
(define ai:orc-03-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep 65535)
    (ai:script ai:orc-03-attack-endloop) ) )

(define-ai 'orc-03 "*" "orc-03"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:set-auto-attack #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 2)
    (ai:set  (ai:tanker) 1)
    (ai:wait (ai:worker))	;; start hangs if nothing available

    (ai:need (ai:platform))

    (ai:script ai:orc-03-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and tankers and oil platform.
;;		Also if needed a farm.
;;		Attacks with soldier and shooter and destroyer.
;;
(define ai:hum-04-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep 25000)
    
    (ai:script ai:hum-04-attack-endloop) ) )

(define-ai 'hum-04 "*" "hum-04"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 4)
    (ai:set  (ai:tanker) 1)
    (ai:wait (ai:worker))	;; start hangs if nothing available

    (ai:need (ai:platform))

    (ai:force 0 (ai:destroyer) 2 (ai:soldier) 3 (ai:shooter) 4 (ai:transporter) 4)
    (ai:force 1 (ai:destroyer) 2 (ai:soldier) 3 (ai:shooter) 4 (ai:transporter) 4)
    (ai:sleep 27000)

    (ai:force 1 (ai:destroyer) 4 (ai:soldier) 10 (ai:shooter) 8 (ai:transporter) 6)
    (ai:sleep 22000)

    (ai:sleep 22000)

    (ai:sleep 22000)

    (ai:sleep 18000)

    (ai:script ai:hum-04-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and tankers and oil platform.
;;		Also if needed a farm.
;;		Attacks with soldier and shooter and destroyer.
;;
(define ai:orc-04-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep 10500)
    (ai:script ai:orc-04-attack-endloop) ) )

(define-ai 'orc-04 "*" "orc-04"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 4)
    (ai:set  (ai:tanker) 1)
    (ai:wait (ai:worker))	;; start hangs if nothing available

    (ai:set  (ai:transporter) 1)
    (ai:force 0 (ai:soldier) 3 (ai:shooter) 4 (ai:destroyer) 2)
    (ai:need (ai:platform))


    (ai:set  (ai:transporter) 2)
    (ai:sleep 15000)
    (ai:force 0 (ai:soldier) 6 (ai:shooter) 5 (ai:destroyer) 2)

    (ai:sleep 15000)

    (ai:sleep 19500)
    (ai:force 0 (ai:soldier) 10 (ai:shooter) 8 (ai:destroyer) 2)

    (ai:sleep 12000)

    (ai:sleep 13500)

    (ai:sleep 30500)

    (ai:script ai:orc-04-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and tankers and oil platform.
;;		Also if needed a farm.
;;		Attacks with soldier, shooter and destroyer.
;;
(define ai:hum-05-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep 18000)

    (ai:sleep 12000)

    (ai:sleep 24000)

    (ai:sleep 14000)

    (ai:script ai:hum-05-attack-endloop) ) )

(define-ai 'hum-05 "*" "hum-05"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 4)
    (ai:set  (ai:tanker) 1)
    (ai:set  (ai:transporter) 1)
    (ai:wait (ai:worker))	;; start hangs if nothing available

    (ai:need (ai:platform))

    (ai:force 0 (ai:destroyer) 3 (ai:soldier) 4 (ai:shooter) 3 (ai:transporter) 2)

    (ai:sleep 3000)

    (ai:sleep 4000)

    (ai:sleep 4000)

    (ai:sleep 12000)

    (ai:force 0 (ai:destroyer) 4 (ai:soldier) 12 (ai:shooter) 4 (ai:transporter) 4)


    (ai:sleep 14000)

    (ai:sleep 12000)

    (ai:script ai:hum-05-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers, blacksmith.
;;		Also if needed a farm.
;;		Upgrades weapon and missile.
;;		Attacks with soldier, shooter and cavalrie.
;;
(define ai:hum-06-attack-endloop
  '((writes nil "Looping !\n")
    (ai:force 0 (ai:soldier) 0 (ai:shooter) 1 (ai:cavalrie) 1 )
    (ai:sleep 14000)

    (ai:force 0 (ai:soldier) 1 (ai:shooter) 3 (ai:cavalrie) 2 )
    (ai:sleep 11000)

    (ai:force 0 (ai:soldier) 0 (ai:shooter) 3 (ai:cavalrie) 2 )
    (ai:sleep 8000)

    (ai:force 0 (ai:soldier) 0 (ai:shooter) 2 (ai:cavalrie) 2 )
    (ai:sleep 11000)

    (ai:sleep 9000)

    (ai:script ai:hum-06-attack-endloop) ) )

(define-ai 'hum-06 "*" "hum-06"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 4)
    (ai:wait (ai:worker))	;; start hangs if nothing available

    (ai:force 0 (ai:soldier) 3 (ai:shooter) 3)
    (ai:sleep 4000)

    (ai:sleep 3000)

    (ai:sleep 4000)

    (ai:need (ai:blacksmith))
    (ai:research (ai:upgrade-missile-1))

    (ai:force 0 (ai:soldier) 4 (ai:shooter) 4)

    (ai:research (ai:upgrade-weapon-1))

    (ai:force 0 (ai:soldier) 6 (ai:shooter) 4)
    (ai:sleep 13000)

    (ai:force 0 (ai:soldier) 1 (ai:shooter) 3 (ai:cavalrie) 3 )
    (ai:sleep 14000)

    (ai:research (ai:upgrade-armor-1))

    (ai:script ai:hum-06-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only worker and tanker.
;;
(define-ai 'hum-07 "*" "hum-07"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:set-auto-attack #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 2)
    (ai:set  (ai:tanker) 1)
    (ai:sleep	10000)
    (ai:restart)))

;;=============================================================================
;;	This AI script builds only workers, blacksmith.
;;		Also if needed a farm.
;;		Upgrades weapon and missile.
;;		Attacks with soldier, shooter and cavalrie.
;;
(define ai:hum-08-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep 16000)
    (ai:force 0 (ai:soldier) 1 (ai:shooter) 4 (ai:cavalrie) 3 (ai:catapult) 1)

    (ai:sleep 14000)

    (ai:sleep 12000)

    (ai:script ai:hum-08-attack-endloop) ) )

(define-ai 'hum-08 "*" "hum-08"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:sleep (ai:get-sleep-cycles)))

    (ai:set  (ai:worker) 3)
    (ai:wait (ai:worker))	;; start hangs if nothing available

    (ai:force 0 (ai:soldier) 5 (ai:shooter) 4)
    (ai:sleep 14000)

    (ai:force 0 (ai:soldier) 5 (ai:shooter) 5 (ai:cavalrie) 3)
    (ai:sleep 10000)

    (ai:sleep 15000)

    (ai:research (ai:upgrade-cavalrie-mage))
    (ai:research (ai:cavalrie-mage-spell-1))
    (ai:research (ai:upgrade-missile-1))
    (ai:force 0 (ai:soldier) 2 (ai:shooter) 5 (ai:cavalrie) 4 (ai:catapult) 1)
    (ai:sleep 15000)

    (ai:research (ai:upgrade-weapon-1))
    (ai:research (ai:upgrade-armor-1))

    (ai:sleep 21000)

    (ai:research (ai:upgrade-elite-shooter))
    (ai:sleep 12000)

    (ai:script ai:hum-08-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only worker and tanker.
;;
(define-ai 'hum-09 "*" "hum-09"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f) (ai:set-auto-attack #f) (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 2)
    (ai:set  (ai:tanker) 1)
    (ai:sleep	10000)
    (ai:restart)))

;;=============================================================================
;;	This AI script builds only worker and tanker.
;;		Upgrades very much.
;;		Attacks with land units and water units.
;;
(define ai:hum-10-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep	5000)
    (ai:force 0 (ai:soldier) 4 (ai:shooter) 4 (ai:cavalrie) 4 (ai:catapult) 1 (ai:transporter) 1)

    (ai:sleep	6000)
    (ai:force 0 (ai:destroyer) 3 (ai:battleship) 1)

    (ai:sleep	5000)

    (ai:script ai:hum-10-attack-endloop) ) )

(define-ai 'hum-10 "*" "hum-10"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)
      (ai:force-role 0 'defend) (ai:force-role 1 'defend)
      (ai:sleep (ai:get-sleep-cycles)))

    (ai:set  (ai:worker) 7)
    (ai:set  (ai:tanker) 3)
    (ai:wait (ai:worker))	;; Wait for the workers

    (ai:set  (ai:transporter) 1)
    (ai:force 0 (ai:destroyer) 2 (ai:transporter) 1)
    (ai:sleep	6000)
    (ai:force 0 (ai:soldier) 4 (ai:shooter) 4
      (ai:destroyer) 2 (ai:transporter) 1)

    (ai:research (ai:upgrade-cavalrie-mage))
    (ai:research (ai:cavalrie-mage-spell-1))
    (ai:research (ai:mage-spell-1))
    (ai:research (ai:mage-spell-2))
    (ai:research (ai:upgrade-missile-1))

    (ai:force 0 (ai:soldier) 4 (ai:shooter) 4 (ai:transporter) 1 (ai:destroyer) 2)

    (ai:research (ai:upgrade-weapon-1))
    (ai:sleep	4000)
    (ai:research (ai:upgrade-armor-1))

    (ai:sleep	5000)
    (ai:force 0 (ai:destroyer) 3 (ai:battleship) 1)
    (ai:research (ai:upgrade-missile-2))
    (ai:research (ai:upgrade-weapon-2))

    (ai:research (ai:upgrade-ship-cannon-1))
    (ai:sleep	3000)
    (ai:research (ai:upgrade-armor-2))
    (ai:research (ai:upgrade-ship-armor-1))
    (ai:research (ai:upgrade-elite-shooter))

    (ai:research (ai:upgrade-catapult-1))
    (ai:research (ai:upgrade-ship-cannon-2))
    (ai:research (ai:upgrade-ship-armor-2))
    (ai:research (ai:upgrade-elite-shooter-1))
    (ai:force 0 (ai:soldier) 1 (ai:shooter) 2 (ai:mage) 1)
    (ai:sleep	5000)
    (ai:research (ai:upgrade-elite-shooter-2))
    (ai:research (ai:upgrade-elite-shooter-3))

    (ai:sleep	5000)

    (ai:script ai:hum-10-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers.
;;		Upgrades very much.
;;		Attacks with land units.
;;
(define ai:hum-11-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep	12000)
    (ai:force 0 (ai:soldier) 1 (ai:shooter) 1 (ai:cavalrie) 1 (ai:catapult) 1
	(ai:mage) 3)

    (ai:sleep	8000)
    (ai:force 0 (ai:soldier) 1 (ai:shooter) 1 (ai:cavalrie) 1 (ai:catapult) 1
	(ai:mage) 3)

    (ai:sleep	13000)

    (ai:script ai:hum-11-attack-endloop) ) )

(define-ai 'hum-11 "*" "hum-11"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)
      (ai:sleep (ai:get-sleep-cycles)))
    (ai:set  (ai:worker) 8)
    (ai:wait (ai:worker))	;; Wait for the workers

    (ai:sleep	6000)
    (ai:force 0 (ai:soldier) 2 (ai:shooter) 2 (ai:cavalrie) 2)

    (ai:sleep	6000)

    (ai:sleep	7000)
    (ai:force 0 (ai:soldier) 2 (ai:shooter) 2 (ai:cavalrie) 2)

    (ai:sleep	5000)
    (ai:force 0 (ai:soldier) 1 (ai:shooter) 1 (ai:cavalrie) 2 (ai:catapult) 1)
    (ai:research (ai:upgrade-missile-1))
    (ai:research (ai:upgrade-weapon-1))
    (ai:research (ai:upgrade-armor-1))

    (ai:sleep	6000)
    (ai:force 0 (ai:soldier) 1 (ai:shooter) 1 (ai:cavalrie) 1 (ai:catapult) 1	(ai:mage) 3)

    (ai:sleep	9000)

    (ai:sleep	7000)
    (ai:research (ai:upgrade-elite-shooter))
    (ai:research (ai:upgrade-elite-shooter-1))
    (ai:sleep	13000)


    (ai:research (ai:upgrade-elite-shooter-2))
    (ai:research (ai:mage-spell-1))

    (ai:research (ai:upgrade-cavalrie-mage))
    (ai:sleep	7000)
    (ai:research (ai:cavalrie-mage-spell-1))
    (ai:research (ai:mage-spell-2))
    (ai:research (ai:upgrade-weapon-2))
    (ai:sleep	12000)

    (ai:research (ai:upgrade-armor-2))
    (ai:research (ai:mage-spell-3))
    (ai:research (ai:mage-spell-4))
    (ai:research (ai:upgrade-catapult-1))

    (ai:sleep	8000)

    (ai:research (ai:cavalrie-mage-spell-1))
    (ai:research (ai:mage-spell-5))
    (ai:sleep	13000)


    (ai:script ai:hum-11-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and tankers.
;;		Upgrades very much.
;;		Attacks with land and water units.
;;
(define ai:hum-12-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep	10000)
    (ai:force 0 (ai:soldier) 2 (ai:cavalrie) 10 (ai:mage) 2)

    (ai:sleep	5000)

    (ai:sleep	7000)
    (ai:force 0 (ai:destroyer) 2 (ai:battleship) 2 (ai:submarine) 5
	(ai:scout) 2) 

    (ai:script ai:hum-12-attack-endloop) ) )

(define-ai 'hum-12 "*" "hum-12"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)
      (ai:force-role 0 'defend) (ai:force-role 1 'attack)
      (ai:force-role 2 'defend) (ai:force-role 3 'attack)
      (ai:sleep (ai:get-sleep-cycles)))

    (ai:set  (ai:tanker) 3)
    (ai:set  (ai:worker) 7)
    (ai:wait (ai:worker))	;; Wait for the workers

    (ai:need (ai:platform))
    (ai:set  (ai:transporter) 2)

    (ai:force 0 (ai:soldier) 2)

    (ai:sleep	2000)

    (ai:force 0 (ai:destroyer) 2 (ai:battleship) 2 (ai:submarine) 4) 

    (ai:sleep	3000)
    
    (ai:force 0 (ai:soldier) 1 (ai:cavalrie) 10 (ai:mage) 2)

    (ai:research (ai:mage-spell-1))
    (ai:research (ai:upgrade-cavalrie-mage))
    (ai:research (ai:cavalrie-mage-spell-1))
    (ai:research (ai:mage-spell-2))
    (ai:research (ai:mage-spell-3))
    (ai:research (ai:mage-spell-4))
    (ai:research (ai:cavalrie-mage-spell-2))
    (ai:research (ai:mage-spell-5))
    (ai:research (ai:upgrade-ship-cannon-1))
    (ai:research (ai:upgrade-ship-armor-1))
    (ai:sleep	4000)

    (ai:force 0 (ai:destroyer) 2 (ai:battleship) 2 (ai:submarine) 4) 

    (ai:research (ai:upgrade-ship-cannon-2))
    (ai:research (ai:upgrade-ship-armor-2))
    (ai:research (ai:upgrade-catapult-1))
    (ai:research (ai:upgrade-catapult-2))
    (ai:sleep	6000)

    (ai:force 0 (ai:destroyer) 2 (ai:battleship) 2 (ai:submarine) 5) 

    (ai:sleep	7000)

    (ai:sleep	5000)

    (ai:force 0
	      (ai:soldier) 1 (ai:cavalrie) 10 (ai:mage) 2 (ai:catapult) 1
	      (ai:destroyer) 2 (ai:battleship) 2 (ai:submarine) 5 (ai:scout) 2) 

    (ai:research (ai:upgrade-missile-1))
    (ai:research (ai:upgrade-weapon-1))
    (ai:research (ai:upgrade-armor-1))
    (ai:research (ai:upgrade-missile-2))

    (ai:research (ai:upgrade-elite-shooter))
    (ai:research (ai:upgrade-elite-shooter-1))
    (ai:research (ai:upgrade-elite-shooter-2))
    (ai:research (ai:upgrade-elite-shooter-3))
    (ai:research (ai:upgrade-weapon-2))
    (ai:research (ai:upgrade-armor-2))

    (ai:script ai:hum-12-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and tankers.
;;		Upgrades very much.
;;		Attacks with land and air units.
;;
(define ai:hum-13-attack-endloop
  '((writes nil "Looping !\n")

    (ai:sleep	12000)
    (ai:force 0 (ai:cavalrie) 3 (ai:mage) 2 (ai:shooter) 1 (ai:catapult) 2)

    (ai:sleep	14000)
    (ai:force 0 (ai:flyer) 4)
    (ai:sleep	14000)

    (ai:script ai:hum-13-attack-endloop) ) )

(define-ai 'hum-13 "*" "hum-13"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)      
      (ai:sleep (ai:get-sleep-cycles)))

    (ai:set  (ai:tanker) 2)
    (ai:set  (ai:worker) 5)
    (ai:wait (ai:worker))	;; Wait for the workers

    (ai:need (ai:platform))
    (ai:set  (ai:transporter) 2)

    (ai:force 0 (ai:cavalrie) 3 (ai:mage) 2)

    (ai:research (ai:mage-spell-1))
    (ai:research (ai:upgrade-cavalrie-mage))
    (ai:research (ai:cavalrie-mage-spell-1))
    (ai:research (ai:mage-spell-2))
    (ai:research (ai:mage-spell-3))
    (ai:research (ai:mage-spell-4))
    (ai:research (ai:cavalrie-mage-spell-2))

    (ai:sleep	4000)

    (ai:force 0 (ai:cavalrie) 4 (ai:mage) 2 (ai:shooter) 1)
    (ai:sleep	12000)

    (ai:sleep	15000)

    (ai:research (ai:mage-spell-5))
    (ai:research (ai:upgrade-ship-cannon-1))
    (ai:research (ai:upgrade-ship-armor-1))
    (ai:research (ai:upgrade-ship-cannon-2))
    (ai:research (ai:upgrade-ship-armor-2))
    (ai:force 0 (ai:cavalrie) 3 (ai:shooter) 1 (ai:mage) 2 (ai:catapult) 1)
    (ai:sleep	15000)

    (ai:force 0 (ai:flyer) 4)
    (ai:sleep	20000)

    (ai:sleep	14000)

    (ai:sleep	18000)

    (ai:research (ai:upgrade-catapult-1))
    (ai:research (ai:upgrade-catapult-2))
    (ai:research (ai:upgrade-missile-1))
    (ai:research (ai:upgrade-weapon-1))
    (ai:research (ai:upgrade-armor-1))
    (ai:research (ai:upgrade-missile-2))
    (ai:research (ai:upgrade-elite-shooter))

    (ai:script ai:hum-13-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and ogres.
;;
(define ai:hum-14-orange-attack-endloop
  '((writes nil "Looping !\n")
    (ai:script ai:hum-14-orange-attack-endloop) ) )

(define-ai 'hum-14-orange "*" "hum-14-orange"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)
      (ai:force-role 0 'defend) (ai:force-role 1 'attack)
      (ai:sleep (ai:get-sleep-cycles)))

    (ai:set  (ai:worker) 5)
    (ai:wait (ai:worker))	;; Wait for the workers

    (ai:force 0 (ai:cavalrie) 15)

    (ai:script ai:hum-14-orange-attack-endloop) ))

;;=============================================================================
;;	This AI script builds nothing.
;;		Does only upgrades.
;;
(define ai:hum-14-red-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep	30000)
    (ai:sleep	30000)
    (ai:script ai:hum-14-red-attack-endloop) ) )

(define-ai 'hum-14-red "*" "hum-14-red"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)
      (ai:force-role 0 'defend) (ai:force-role 1 'attack)
      (ai:sleep (ai:get-sleep-cycles)))

    (ai:research (ai:mage-spell-1))
    (ai:research (ai:mage-spell-2))
    (ai:research (ai:mage-spell-3))
    (ai:research (ai:mage-spell-4))
    (ai:research (ai:mage-spell-5))

    (ai:script ai:hum-14-red-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only workers and dragons.
;;		Does only air attacks.
;;
;;	FIXME: This AI should only collect GOLD.
;;
(define ai:hum-14-white-attack-endloop
  '((writes nil "Looping !\n")
    (ai:force 0 (ai:flyer) 10)
    (ai:sleep	19000)

    (ai:sleep	20000)

    (ai:force 1 (ai:flyer) 12)

    (ai:sleep	21000)

    (ai:sleep	20000)

    (ai:script ai:hum-14-white-attack-endloop) ) )

(define-ai 'hum-14-white "*" "hum-14-white"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)
      (ai:force-role 0 'defend) (ai:force-role 1 'attack)
      (ai:sleep (ai:get-sleep-cycles)))

    (ai:set  (ai:worker) 9)
    (ai:wait (ai:worker))	;; Wait for the workers

    (ai:force 1 (ai:flyer) 10)

    (ai:sleep	64000)

    (ai:sleep	12000)

    (ai:sleep	18000)

    (ai:script ai:hum-14-white-attack-endloop) ))

;;=============================================================================
;;	This AI script builds only tanker.
;;		Does only upgrades.
;;
;;	FIXME: This AI should only collect GOLD.
;;
(define ai:hum-14-black-attack-endloop
  '((writes nil "Looping !\n")
    (ai:sleep	30000)
    (ai:script ai:hum-14-black-attack-endloop) ) )

(define-ai 'hum-14-black "*" "hum-14-black"
  '(
    ;;	Define the main AI script.
    (begin (ai:debug #f)
      (ai:force-role 0 'defend) (ai:force-role 1 'attack)
      (ai:sleep (ai:get-sleep-cycles)))

    (ai:set  (ai:tanker) 1)
    (ai:research (ai:upgrade-cavalrie-mage))
    (ai:research (ai:cavalrie-mage-spell-1))
    (ai:research (ai:cavalrie-mage-spell-2))
    (ai:research (ai:mage-spell-1))
    (ai:research (ai:mage-spell-2))
    (ai:research (ai:mage-spell-3))
    (ai:research (ai:mage-spell-4))
    (ai:research (ai:mage-spell-5))
    (ai:research (ai:upgrade-weapon-1))
    (ai:research (ai:upgrade-armor-1))
    (ai:research (ai:upgrade-weapon-2))
    (ai:research (ai:upgrade-armor-2))
    (ai:research (ai:upgrade-elite-shooter))
    (ai:research (ai:upgrade-elite-shooter-1))
    (ai:research (ai:upgrade-elite-shooter-2))
    (ai:research (ai:upgrade-elite-shooter-3))
    (ai:research (ai:upgrade-ship-cannon-1))
    (ai:research (ai:upgrade-ship-armor-1))
    (ai:research (ai:upgrade-ship-cannon-2))
    (ai:research (ai:upgrade-ship-armor-2))

    (ai:script ai:hum-14-black-attack-endloop) ))
